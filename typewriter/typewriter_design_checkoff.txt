Name: Dani Jacobs
utln: djacob09

Answer the questions below, and submit your answers under the
assignment "typewriter Design Checkoff" on Gradescope.  You must
sign up for a design checkoff slot with a TA to discuss your provided
answers (see spec for link).

1. Run the reference implementation using the following command:
`./the_typewriter pingpong.text logfile.text`

Once it is running, do the following:
        a) Type "ping"
        b) Press return
        c) Type "pong"
        d) Press backspace 5 times
        e) Press escape
        f) Type "x"
        g) Type "y"
        h) Press "return"

After doing this, what are the contents of pingpong.text? What about
logfile.text? Paste both below, and *briefly* describe the contents
of logfile.text; what information is logged?

Answer:
pingpong.text:
ping

logfile.text:
: Cursor Position: [0, 0]

: Cursor Position: [1, 0]
p
: Cursor Position: [2, 0]
pi
: Cursor Position: [3, 0]
pin
: Cursor Position: [4, 0]
ping
: Cursor Position: [0, 1]
ping

: Cursor Position: [1, 1]
ping
p
: Cursor Position: [2, 1]
ping
po
: Cursor Position: [3, 1]
ping
pon
: Cursor Position: [4, 1]
ping
pong
: Cursor Position: [0, 2]
ping
pong

: Cursor Position: [4, 1]
ping
pong
: Cursor Position: [3, 1]
ping
pon
: Cursor Position: [2, 1]
ping
po
: Cursor Position: [1, 1]
ping
p
: Cursor Position: [0, 1]
ping

Logfile has the location of the cursor before every action, as well as what the
entire textfile looked like at that point in time.

2. Now run the keylogger that was provided with the starter files
(i.e., `./keylogger`). When prompted for a filename, enter
"test.input". Then carry out the exact steps (a)-(h) as stated in
the previous question, except swap steps (a) and (c). Conclude the
keylogger by pressing "escape" two times. You should now have a
file named "test.input". 

Without editing/removing either of the files created in the previous
question, run the reference implementation again, this time sending
it the test input file you just created:
`./the_typewriter pingpong.text logfile.text < test.input`

What are the contents of pingpong.text now? Explain why those are the
contents. If you see anything other than "pongping", try creating the
file test.input again.

Answer:
pongping

The contents of test.input were fed to the typewriter command, which 
had tracked our steps a-h. 


3. What public functions from the TextUI class do you think you will
need to use? Which TextUI function is used to actually display
information on the user's terminal screen? Describe the arguments to
that function.

Answer:
I will need to use render, getChar to take in input from the user, 
savePrompt to save, and startLogMode. Render is what displays information.
It takes the current test of the file as a vector of string lines, and the
current position of the cursor/active editing location
as column and row numbers.

4. Consider implementing the handling of the input "backspace." What
are the different cases your implementation must consider? What
should your implementation do in each case; specifically, how are the
inputs to TextUI's render() function altered? You should play around
with the reference implementation when coming up with your answers.

Answer:
At the top the file (0,0), pressing backspace does nothing.

At the beginning of any line but the first (x>=1,any y), backspace deletes the new line character and moves the cursor to the end of the previous line. (Subtract 1 from x, and y is end of previous line). 

When the cursor is in any column but the first (any x, y>=1), backspace should erase the previous letter (and add it to the action stack so that it can later be undone if needed). (X stays the same, subtract 1 from y).


5. How many ActionStack instances will your program use? When are the
different times an Action should be pushed on to one of these
ActionStacks? What information does each Action store?

Answer:
There will be undo and redo action stacks, so 2. One will keep track 
of all changes made so that they can potentially be undone, 
and the other will keep track of all changes undone so that they can potentially be redone.


6. Use the reference implementation to play extensively with the
"undo" feature (in typewriter: "escape" then "u"). Try undoing with
many different inputs (printable characters, backspaces, newlines,
etc.) and different combinations of these inputs. Make sure to try
pressing undo multiple times in a row.

What are the rules determining how many characters should be undone
each time "undo" is entered? Express your answer using pseudocode. We
encourage you to write your pseudocode using an ActionStack---this
will more closely match the code you eventually write!

Answer:
def undo() {
// make sure there is what to undo
while (DoneActionStack.isNotEmpty())
{
   // identify top element
   char elem = DoneActionStack.top();   

   // if its a backspace keep adding the characters back until i hit something thats not a backspace
   if (elem == BACKSPACE) {

   }

   // if its a new line character treat that as a one off
   if (elem == '\n') {
      DoneActionStack.pop();
      break;
   }

   // ignore anything that happens with arrow keys
   else if (elem not in (UP, DOWN, LEFT, RIGHT))
   {   
      // keep removing characters until I hit a new line character or a backspace
      undo();
   }
}
}

7. Now use the reference to play with "redo" functionality (in
typewriter: "escape" then "r") after undoing actions. Write
pseudocode below capturing the rules for how many characters should
be "redone" each time "redo" is pressed.

Answer:
while ( UndoneActionStack.isNotEmpty()
      and UndoneActionStack.top() != '/n',KEY_BACKSPACE )
{
   char elem = UndoneActionStack.top();
   UndoneActionStack.pop();
   if (elem not up, down, left, right) {
      DoneActionStack.push(elem);
   }
}

8. Consider implementing the "up" arrow key functionality.

   (a) What functions from the TextUI class will you need to use to
       implement "up"?

       getChar, render, getTerminalHeight, and getTerminalWidth.

Answer:

   (b) What are the different cases you need to consider for "up"?
       In particular, consider: different lengths of the current line
       (including lines that are long enough to wrap around), where
       the cursor is located, and different lengths for the line prior
       to the current line.

Answer:


   (c) Provide pseudocode for the handling of the "up" arrow.

Answer:


   (d) Now, provide psuedocode for the handling of the "down" arrow.

Answer:


9. What classes will you need in your program?  What are the important
functions and member variables that those classes will comprise? How
will the classes interact (i.e., which classes will be clients of
others)?

Answer:


10. How do you plan to test your program? What evidence of testing do
you plan to submit?

Answer:


11. What is your timeline for completing this project? What would you
like to have completed, and by which dates?  

Answer: 
