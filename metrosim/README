/*
* Project 1: Metro Simulator
* CS 15
* Danielle Jacobs
* README
*/

Compile/run:
     - Compile using
            make MetroSim
     - run executable with
            ./MetroSim stationsFile passFile [commands]

Program Purpose:
     Simulates a train moving between stations. Stations are provided by the
     user, and users can move the train and add passengers. Passengers
     have designated arrival and departure stations. After every
     action, the state of all the stations and the train are printed.

Acknowledgements
     Class chatbot
     cplusplus.com
     geeksforgeeks.org
     w3schools.com

Files:

main.cpp:
     Validates number of input arguments and determines which MetroSim.cpp
     functions to call based on input.

MetroSim.cpp:
     Defines how to handle input and output streams and files, moves trains,
     and moving passengers. Connects stationw, train, and passenger queues.
     Defines printing the state of the simulation and the onboarding and
     offboarding processes.

MetroSim.h:
     Metrosim class defines how passengers, stations, and trains interact
     in order to support the simulation as a whole. It contains all
     information relevant to an individual session, and supports all
     actions the user can take.

Passenger.cpp:
     A passenger can be printed, which is called as part of printing
     passenger queues later on.

Passenger.h:
     A passenger has an ID, an arrival station, and a departure station.
     They wait in both stations to get on the train, and on the
     train to depart.

PassengerQueue.cpp:
     Passengers can be added or removed from the front of a queue. Passenger
     queues can be printed, which calls print on each passenger.
     The first passenger in a queue can be returned, and so can the size of
     the passenger queue.

PassengerQueue.h:
     Passenger queues make up stations and the train. Passengers are first in,
     first out. Passengers cannot be added or removed from the middle.

Station.h:
     A station has an ID and a passenger queue of passengers waiting to board
     the train at that station.

Train.cpp:
     A train can be printed as its series of passenger queues.

Train.h:
     A train has a list of passenger queues, each belonging to a train that
     passengers on the train are waiting to get off at.

unit_tests.cpp:
     Passengers and passenger queues are tested with null, queues of 1, and
     queues of many passengers.

Makefile:
     Defines how ./unit_tests and ./MetroSim are compiled and run.

README: this file.

stations.txt:
     an example file containing a list of stations.

test_commands.txt:
     sample list of commands that you could give to the simulator

the_metroSim:
     reference implementation for students to see

Data Structures:
     A passenger queue is a list where you can only edit the
     first and last values. Members are first in, first out, meaning
     the first queue member to be added is also the first to be
     removed. Members can be added to the back. Queues simplify
     lists by having limited functionality to build and test,
     due to the limit of not being able to add or remove from the
     middle of the list. Pasengers get added to the back of the list
     and depart from the front, in the order they arrived.

     Standard vector is part of the C++ std library, which
     can take any element type.
     the ability to check for the size, and add elements to the back.
     Standard vectors have flexible size. I chose them because
     they have the ability to index into them. While I don't need to
     index into passenger queues, I did have the train implemented as
     a vector of passenger queues itself. This way, I can index into
     the list using the station id of the current location of the
     train, grab the corresponding passenger queue of passengers
     on the train waiting to depart there, and manipulate it.

Testing:

<!-- Here describe the following: process of testing (unit tests), mention
of bugs you encountered while testing, mention of testing on inputs of
different sizes and edge cases, good description of base cases you
considered while testing. Demonstrate a methodical approach to
testing.  This section of your REAMDE should be very thorough for
assignments. -->

In part 1, I tested passenger and passenger queue in the unit tests file.
Here I tested creating a null passenger, a passenger with values, and
creating passengers in a loop, and similar for the stations. Once I 
added the MetroSim class, I went back and edited these unit tests to
be based on a MetroSim instance. This was able to help me debug file 
creation and reading, and whether I was correctly handling the wrong number
or unopenable input files. 

I next wanted to make sure that instantiation worked. This meant building
train and station classes and their print function, and testing that they
worked as expected with both the input file and the command line, by comparing
them with diff outputs.

As I added the remaining files I tested them with the diff outputs. I made
sure that the train returned back to the first station after leaving the
last one. I kept station and train as simple classes.

I made sure that at the end of an input commands file, even without m f,
that the simulation ended.

My first few autograder attempts failed because I had a new line after 
"Command? " and I hadn't been printing the state after a passenger was added,
only after initialization and after the train had moved.

I tested on fewer stations, on passengers that had arrival or departure 
stations that wer greater than the number of stations, on adding many
passengers at once or departing at once.  On having passengers get on and off
at the same stop.For a long time, I wanted to save the output file stream as a member
of the MetroSim class. I tried to save it as a pointer and ran into
many memory errors with Valgrind, b
:

Part that you found most difficult:

I found the MakeFile most difficult, learning how to write it and how
to keep track of all the moving pieces and various files in this assignment.

For a long time, I wanted to save the output file stream as a member
of the MetroSim class. I tried to save it as a pointer and ran into
many memory errors with Valgrind, both during unit testing and when
testing the simulation as a whole. Eventually I was able to find about 
the append mode of an output stream.


Time Spent: Approximately 20 hours.
